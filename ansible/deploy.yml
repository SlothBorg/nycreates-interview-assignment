---
- name: Deploy Go Web Application
  hosts: droplet
  remote_user: root
  become: yes
  vars:
    app_user: webapp
    app_dir: /home/webapp/app

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - nginx
          - ufw
        state: present

    - name: Download and install Go
      unarchive:
        src: https://go.dev/dl/go1.21.5.linux-amd64.tar.gz
        dest: /usr/local
        remote_src: yes
        creates: /usr/local/go/bin/go

    - name: Add Go to PATH
      lineinfile:
        path: /etc/profile
        line: "export PATH=$PATH:/usr/local/go/bin"
        create: yes

    - name: Create webapp user
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        home: /home/webapp
        create_home: yes

    - name: Create app directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0755"

    - name: Copy entire src directory
      copy:
        src: "../src/"
        dest: "{{ app_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0644"
        directory_mode: "0755"

    - name: Debug - List files in app directory
      shell: ls -la {{ app_dir }}/
      register: app_files

    - name: Debug - Show app files
      debug:
        var: app_files.stdout_lines

    - name: Find Go files in subdirectories
      shell: find {{ app_dir }} -name "*.go" -type f
      register: go_files

    - name: Debug - Show Go files found
      debug:
        var: go_files.stdout_lines

    - name: Determine Go application directory
      shell: find {{ app_dir }} -name "*.go" -type f | head -1 | xargs dirname
      register: go_app_dir
      failed_when: go_files.stdout_lines | length == 0

    - name: Debug - Show determined app directory
      debug:
        var: go_app_dir.stdout

    - name: Initialize Go module in determined directory
      shell: |
        cd {{ go_app_dir.stdout }}
        if [ ! -f go.mod ]; then
          /usr/local/go/bin/go mod init webapp
        fi
      become_user: "{{ app_user }}"
      environment:
        PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"

    - name: Build Go application from determined directory
      shell: |
        cd {{ go_app_dir.stdout }}
        /usr/local/go/bin/go mod tidy
        /usr/local/go/bin/go build -o {{ app_dir }}/webapp .
      become_user: "{{ app_user }}"
      environment:
        PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"

    - name: Create systemd service file
      copy:
        content: |
          [Unit]
          Description=Go Web Application
          After=network.target

          [Service]
          Type=simple
          User={{ app_user }}
          WorkingDirectory={{ app_dir }}
          ExecStart={{ app_dir }}/webapp
          Restart=always
          RestartSec=5
          Environment=PORT=8080

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/webapp.service
        mode: "0644"

    - name: Reload systemd and start webapp service
      systemd:
        name: webapp
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Configure nginx
      copy:
        content: |
          server {
              listen 80;
              server_name _;

              # Serve static frontend files
              location / {
                  root /home/webapp/app/frontend;
                  try_files $uri $uri/ /index.html;
                  index index.html;
              }

              # Proxy API requests to Go backend
              location /api {
                  proxy_pass http://localhost:8080/api/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              location /api/ {
                  proxy_pass http://localhost:8080/api/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
        dest: /etc/nginx/sites-available/webapp
        mode: "0644"

    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/webapp
        dest: /etc/nginx/sites-enabled/webapp
        state: link

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Test nginx configuration
      command: nginx -t

    - name: Restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: Configure firewall
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "22"
        - "80"
        - "443"

    - name: Enable firewall
      ufw:
        state: enabled
